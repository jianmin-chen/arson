burn x = 1  # Variable
for i through (0, 10) {
    burn x = x + 1  # No prefix notation currently
}

burn time = True
fire(time)  # => True

prepmatch countdown(num) {
    # This is a function. Function declarations start with "prep match".
    while (num > 0) {
        fire(num)  # fire = "print" in every other language ever
        burn num = num - 2
    }
}

countdown(x)  # Countdown back to 0

burn coords = [43.55, 42.55, "hi"]
fire(coords)

# Basic power function
prepmatch power(num, exp) {
    burn res = 1
    for i through (0, exp) {
        burn res = res * num
    }
    return res
}

burn y = power(8, 3)
fire(y)

prepmatch min(a, b) {
    if (a < b) {
        return a
    } else {
        return b
    }
}

burn test = min(2, 3)
fire(test)
fire("nesting", min(2, 3))

burn coords = [43.55, 42.55]
fire(coords[1])
fire(coords[length])

for i through (0, coords[length]) {
    fire("index", i)
}

coords[push](2 * 3)
fire(coords)
coords[push](y + 2)
fire(coords)
coords[push](min)
fire(coords)
coords[push]([1, 2])
fire(coords[5][0])

coords[update](1, "hi this works")
coords[5][update](1, coords[5][1] * 2)
fire(coords)

# What about dictionaries
burn todo = {
    "1": "Burn",
    "2": "Clean",
    "3": "Escape"
}
fire(todo)
fire(todo["1"])  # => Burn
todo[update]("2", [1, 2, {"a": "foo", "b": "bar"}])
fire("updated", todo)
fire(todo["2"][2]["b"])

lightertype Flamethrower {
    prepmatch ignite(type, strength) {
        # "ignite" is the constructor method
        self[type] = type
        self[strength] = strength
    }

    prepmatch use() {
        fire("In use...")
    }

    prepmatch morePowerful(flamethrower) {
        if (self[strength] > flamethrower[strength]) {
            return True
        } else {
            return False
        }
    }
}

burn a = pullout Flamethrower("a", 2)