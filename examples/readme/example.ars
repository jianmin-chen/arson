burn x = 1  # Variable
for i through (0, 10) {
    burn x = x + 1  # No prefix notation currently
}

burn time = true
fire(time)  # => true

prepmatch countdown(num) {
    # This is a function. Function declarations start with "prep match".
    while num > 0 {
        fire(num)  # fire = "print" in every other language ever
        burn num = num - 1
    }
}

lightmatch countdown(x)  # Countdown back to 0

prepmatch location(coords) {
    if (coords[0] == 43.55 and coords[1] == 42.55) {
        return coords
    } else {
        return [0, 0]
    }
}

# Arrays work
# This is probably an actual place, whoopsies
burn placeToBurn = location([43.55, 42.55])
fire(placeToBurn)

# What about dictionaries
burn todo = {
    "1": "Burn",
    "2": "Clean",
    "3": "Escape"
}
fire(todo["1"])  # => Burn
burn todo["2"] = "Vandalize"
fire(todo["2"])  # => Vandalize

# Classes! No inheritance, etc. but it works
lightertype Flamethrower {
    prepmatch ignite(type, strength) {
        # "ignite" is the constructor method
        self.type = type
        self.strength = strength
    }

    prepmatch use() {
        fire("In use...")
    }

    prepmatch morePowerful(flamethrower) {
        if (self.strength > flamethrower.strength) {
            return True
        } else {
            return False
        }
    }
}

burn a = pullout Flamethrower("a", 2)
burn b = pullout Flamethrower("b", 3)
fire("a is more powerful than b", a[morePowerful](b))